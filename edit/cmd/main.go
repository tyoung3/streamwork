package main

/* StreamWork Go code. Generated by swgo.c-0.9.2
*/

/***********   Network Definition   **********   
(MV edit.ModelView )1 		<- 1(M edit.Model);	
(C edit.Controller )1 		<- 2(MV edit.ModelView);	
(V edit.View )0 		<- 2(C edit.Controller);	
(C edit.Controller )0 		<- 1(V edit.View);	
(MV edit.ModelView )0 		<- 3(C edit.Controller);	
(M edit.Model )0 		<- 3(MV edit.ModelView);	
*********************************************/

import "sync"
import "github.com/tyoung3/streamwork/fbp"
import "github.com/tyoung3/streamwork/edit"


func main() {
	var cs []chan interface{}
	var wg sync.WaitGroup

cs = append(cs,make(chan interface{}))
cs = append(cs,make(chan interface{}))
cs = append(cs,make(chan interface{}))
cs = append(cs,make(chan interface{}))
cs = append(cs,make(chan interface{}))
cs = append(cs,make(chan interface{}))


	var cs_V []chan interface{}
	for i:=0; i<2; i++ {
		cs_V=append(cs_V, make(chan interface{},2))
	}
	cs_V[0] = cs[3]
	cs_V[1] = cs[2]
fbp.Launch(&wg,[]string{"V"},	     edit.View, cs_V[0:2])

	var cs_C []chan interface{}
	for i:=0; i<4; i++ {
		cs_C=append(cs_C, make(chan interface{},2))
	}
	cs_C[0] = cs[2]
	cs_C[1] = cs[4]
	cs_C[2] = cs[3]
	cs_C[3] = cs[1]
fbp.Launch(&wg,[]string{"C"},	     edit.Controller, cs_C[0:4])

	var cs_M []chan interface{}
	for i:=0; i<2; i++ {
		cs_M=append(cs_M, make(chan interface{},2))
	}
	cs_M[0] = cs[0]
	cs_M[1] = cs[5]
fbp.Launch(&wg,[]string{"M"},	     edit.Model, cs_M[0:2])

	var cs_MV []chan interface{}
	for i:=0; i<4; i++ {
		cs_MV=append(cs_MV, make(chan interface{},2))
	}
	cs_MV[0] = cs[1]
	cs_MV[1] = cs[5]
	cs_MV[2] = cs[4]
	cs_MV[3] = cs[0]
fbp.Launch(&wg,[]string{"MV"},	     edit.ModelView, cs_MV[0:4])

wg.Wait()
}
